1.Mim = my IM.(或者MiiM,MyM,发音'mi:m')
2.前台用ReactNative,后台用go.
3.附属项目有Mid(MyID,统一的用户认证系统);mx(message exchange,消息在多个结点中交换）
4.监控前端用Grafana.后端Prometheus或者influxdb.
5.管理后台用react-admin
6.react 与vue的比较。react比较严谨，vue相对自由。
  严谨构建大型项目，不太易出错，但上手太慢，开发慢，且组件间协调花较多时间。
  自由擅长构建中小型项目，且变化较快的项目。上手快，开发快。对开发人员要求低，出问题概率高些。
  有时间图快，不太考虑架构，或者不需要太多架构。
7.客户端route思考：不可否认加入route大大简化了客户端开发。把整个客户端当做一个网站。客户端网站化。
  但带来的问题是，程序的整体性破坏，对一些个性化，细节处理ＵＩ，带来难点。
  但大系统组件化，松耦合是必然。自然会带来损耗。社会化分工越来越精细，也要求软件分工越来越精细。
8.Mim优势是利用了开源软件的红利。要能利用到这一红利，需要有开阔的视野及独立的思考。
  开源运动，大大降低了技术的壁垒。在中国，第一技术壁垒是baidu,其次是腾讯。首当其冲。
  相对而言，阿里＼小米＼京东受冲击少些。
9.客户端全事件驱动。所以必需有客户端消息总线。
2018-04-19
10.Rocketchat基本功能搭起来了，音视频用了WebRTC,文件存入的gridfs.
11.小型系统用gridfs处理比较简单，最起码可以架主从服务，有个备份。如果担心与主库影响，可单独架设文件Mongo.
   对于大一些系统，架构Cephfs还是必要的。
